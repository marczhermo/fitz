<?php namespace Fitz\Abstracts\Properties;

use Fitz\Exceptions\ApiException;
use Fitz\Libraries\Reflections\Inspector;

trait ClassPathTrait
{

    /**
     * List of all instantiated objects
     * @var array
     */
    protected static $instances = [];

    /**
     * List all references to classes that will be autoloaded for convenience
     * @var array
     */
    protected static $classes = [];

    /**
     * List all references to abstracts or interfaces relating to $objects property
     * @var array
     */
    protected static $abstracts = [];

    /**
     * List of filters used before executing the controller method
     * @var array
     */
    protected static $filters = [];

    /**
     * List of events which feeds upon executing the controller method
     * @var array
     */
    protected static $events = [];

    /**
     * List of all instantiated objects
     * @return array
     */
    public static function Objects()
    {
        return static::$instances;
    }

    public static function Events()
    {
        return self::$events = array();
    }

    /**
     * Gets the array key from the list of classes
     *
     * @param $classPath
     *
     * @return mixed
     * @throws ApiException
     */
    public static function searchClass($classPath)
    {
        $classKey = array_search($classPath, static::Classes());
        if ($classKey === false) {
            throw new ApiException('Class [' . $classPath . '] is not found in the classes list');
        }

        return $classKey;
    }

    /**
     * Gets the array key from the list of interfaces or abstract classes
     *
     * @param $classPath
     *
     * @return mixed
     */
    public static function searchInterface($classPath)
    {
        return array_search($classPath, static::Abstracts());
    }

    /**
     * Gets the instantiated class or object generated by autoload class
     *
     * @param $classKey
     *
     * @return \Fitz\Requests\Request|\Fitz\Sessions\Session|\Fitz\Repositories\HttpHeader|\Fitz\Libraries\Reflections\Inspector
     * @throws ApiException
     */
    public static function getInstance($classKey)
    {
        if ( ! isset(static::$instances[$classKey]) && $classKey) {
            throw new ApiException('Class [' . $classKey . '] not instantiated.');
        }

        return static::$instances[$classKey];
    }

    /**
     * Creates an instance of a class normally used by autoload class
     *
     * @param           $key
     * @param Inspector $object
     *
     * @throws ApiException
     */
    public static function setInstance($key, Inspector $object)
    {
        static::$instances[$key] = $object->getInstance();
    }

    /**
     * Search for a designated event for a certain class and method name
     *
     * @param $className
     * @param $methodName
     *
     * @return array
     */
    public static function getEvents($className, $methodName)
    {
        $events = self::Events();

        $key = "{$className}@{$methodName}";

        if (isset($events[$key])) {
            return $events[$key];
        }

        return [];
    }

    /**
     * Search for a designated filter for a certain class and method name
     *
     * @param $className
     * @param $methodName
     *
     * @return array
     */
    public static function getFilters($className, $methodName)
    {
        $filters = self::Filters();

        $key = "{$className}@{$methodName}";

        if (isset($filters[$key])) {
            return $filters[$key];
        }

        return [];
    }

}